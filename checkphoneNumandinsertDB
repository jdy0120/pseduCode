
const numArray = 1만개의 false를 가진 배열 생성

const recvPhoneNum = ['01000000000','01012341234','01094899904'] // 누군가 입력한 휴대전화번호

const assignPhoneNum = [] // 데이터베이스에 저장되지 않은 휴대전화번호
const returnPhoneNum = [] // 데이터베이스에 저장되어 리턴할 휴대전화번호

connect.execute('select * from table', (result) => {
  result.forEach(element) => {
    if (recvPhoneNum.indexOf(element.phonenum) >= 0) {
      returnPhoneNum.push(element.phonenum)
    } else {
      numArray[parstInt(element.num03)] = true
      assignPhoneNum.push(element.phonenum)
    }
  }
})

// true를 가진 numArray의 index를 가진 배열 생성 (canAssign은 할당가능한 4자리수 번호를 담은 배열이 된다.)
const canAssign = numArray.filter((element,index) => { if(element == true) return index })

assignPhoneNum.forEach(element => {

  const ranNum = math.random()*(lengthof(canAssign)) // 0에서 canAssign배열의 길이 중 랜덤으로 숫자를 뽑는다.

  connect.execute('insert into table(num03,phonenum) values (canAssign[ranNum],element)')

  canAssign.splice(ranNum)

});